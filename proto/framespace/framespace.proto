syntax = "proto3";

//FrameSpace Service
//
// FrameSpace Service API consists of FrameSpace models
// along with Request and Response objects for endpoints. 
package framespace;

import "google/protobuf/struct.proto";


// Axis represents the top level description of a KeySpace
// such as Samples, Genomic Labels, Clinical Terms.
// Note: Experimental measurements are Units, not axes. 
message Axis {
	string name = 1;
	string description = 2;
}

/* POST /axes/search 
search by name
*/
message SearchAxesRequest {
  repeated string names = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message SearchAxesResponse {
  repeated Axis axes = 1;
  string next_page_token = 2;
}

/** KeySpace is the set of keys that a project has defined, 
* for a given AxisSpace, Example: (sample1, sample2, sample3).
* Restrictions on keys could be defined in the metadata field.
* A key is defined as an entity identifier. 
**/
message KeySpace {
	string id = 1;
	string name = 2;
	string axis_name = 3;
	repeated string keys = 4;
	map<string, string> metadata = 5;
}

/* POST /keyspaces/search 
search by name, axis, and keys
restrictive get by id 
*/
message SearchKeySpacesRequest {
  repeated string keyspace_ids = 1;
  repeated string names = 2;
  repeated string axis_names = 3;
  repeated string keys = 4;
  int32 page_size = 5;
  string page_token = 6;
}

message SearchKeySpacesResponse {
  repeated KeySpace keyspaces = 1;
  string next_page_token = 2;
}

/** Dimension is a subset of keys from a KeySpace 
* axis space inherited from keyspace
* keys, is the actual subset list
* a key must belong to a keyspace
**/
message Dimension {
	string keyspace_id = 1;
	repeated string keys = 2;
}

/* Unit is a basic message enforcing:
* a label specifying what the measurement is
* a description to identify specific info about this measurement
* Units have ids unlike axes because unit names can be arbitrary
*/
message Unit {
	string id = 1;
	string name = 2;
	string description = 3;
}

/* POST /units/search
search for available units of measurement
available in FrameSpace
*/ 
message SearchUnitsRequest {
  repeated string ids = 1;
  repeated string names = 2;
  int32 page_size = 3;
  string page_token = 4;
}

message SearchUnitsResponse {
  repeated Unit units = 1;
  string next_page_token = 2;
}

/** Dataframe consists of two dimensions 
* units is an unstructured flag specifying the value of a cell
* any restrictions on units should be defined in metadata
* order of heterogenous vectors should correspond to order of
* units in Unit list.
*
* the struct object is protos equivalent of a python dict:
* dataframe.contents[contents_key][struct_key] = struct_value
* ie. {'geneA': {'sample1': 0}}, would be populated as
* dataframe.contents['geneA']['sample1'] = 0
**/
message DataFrame {
	string id = 1;
	Dimension major = 2;
	Dimension minor = 3;
	repeated Unit units = 4;
	map<string, string> metadata = 5;
	map<string, google.protobuf.Struct> contents = 6;
}

/* POST /dataframes/search 
search for DataFrames associated with the following keyspaces
search for DataFrames associated with the following units of measurement
*/
message SearchDataFramesRequest {
  repeated string dataframe_ids = 1;
  repeated string keyspace_ids = 2;
  repeated string unit_ids = 3;
  int32 page_size = 4;
  string page_token = 5;
}

// By default, the vector contents of a search dataframes response
// are not returned. The contents should be returned from a dataframe slice
message SearchDataFramesResponse {
  repeated DataFrame dataframes = 1;
  string next_page_token = 2;
}

/* POST /dataframe/slice 
Given an id return a slice based on the following dimensions
Client creates a list of keys as a new dimension.
*/
message SliceDataFrameRequest {
  string dataframe_id = 1;
  Dimension new_major = 2;
  Dimension new_minor = 3;
  int32 page_start = 4;
  int32 page_end = 5;
}
