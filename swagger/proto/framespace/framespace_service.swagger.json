{
  "swagger": "2.0",
  "info": {
    "title": "proto/framespace/framespace_service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/axes": {
      "get": {
        "summary": "SearchAxes method receives a SearchAxesRequest and returns a SearchAxesResponse.",
        "description": "The request allows a client to request all axes or filter axes returned \nbased on the names filter attributes.",
        "operationId": "SearchAxes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchAxesResponse"
            }
          }
        },
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/axes/search": {
      "post": {
        "summary": "SearchAxes method receives a SearchAxesRequest and returns a SearchAxesResponse.",
        "description": "The request allows a client to request all axes or filter axes returned \nbased on the names filter attributes.",
        "operationId": "SearchAxes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchAxesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/framespaceSearchAxesRequest"
            }
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/axes/{name}": {
      "get": {
        "summary": "GetAxesByName method receives name from embedded URI and returns an axis response.",
        "description": "The request allows a client to request a single axis by name.\nNote this enforces axes names to be unique.",
        "operationId": "GetAxesByName",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceAxis"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/dataframe": {
      "post": {
        "summary": "SliceDataFrame method recieves a SliceDataFrameRequest and returns a DataFrame object.",
        "description": "The request allows a client to request a specific dataframe specified by the requried dataframe id.\nDimensions can be specified to subset existing dimensions of a dataframe, or perform a transpose. \nPagination can occur by specifying pageStart and pageEnd based on users needs.",
        "operationId": "BuildDataFrame",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceDataFrame"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/framespaceBuildDataFrameRequest"
            }
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/keyspaces": {
      "get": {
        "summary": "SearchKeySpaces method receives a SearchKeySpacesRequest and returns a SearchKeySpaces Response.",
        "description": "The request allows a client to filter keyspaces returned from a set of axis names, \nkeyspace ids, or keyspace names.",
        "operationId": "SearchKeySpaces",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchKeySpacesResponse"
            }
          }
        },
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/keyspaces/search": {
      "post": {
        "summary": "SearchKeySpaces method receives a SearchKeySpacesRequest and returns a SearchKeySpaces Response.",
        "description": "The request allows a client to filter keyspaces returned from a set of axis names, \nkeyspace ids, or keyspace names.",
        "operationId": "SearchKeySpaces",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchKeySpacesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/framespaceSearchKeySpacesRequest"
            }
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/keyspaces/{id}": {
      "get": {
        "summary": "GetKeySpacesById method receives keyspace id from embedded URI and returns a keyspaces response.",
        "description": "The request allows a client to request a single keyspace by id.",
        "operationId": "GetKeySpacesById",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceKeySpace"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/units": {
      "get": {
        "summary": "SearchUnits method receives a SearchUnitsRequest and returns a SearchUnitsResponse.",
        "description": "The request allows a client to request all units or filter units returned by unit ids, \nor unit names.",
        "operationId": "SearchUnits",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchUnitsResponse"
            }
          }
        },
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/units/search": {
      "post": {
        "summary": "SearchUnits method receives a SearchUnitsRequest and returns a SearchUnitsResponse.",
        "description": "The request allows a client to request all units or filter units returned by unit ids, \nor unit names.",
        "operationId": "SearchUnits",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceSearchUnitsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/framespaceSearchUnitsRequest"
            }
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    },
    "/units/{name}": {
      "get": {
        "summary": "GetUnitsByName method receives a unit name from embedded URI and returns a unit response.",
        "description": "The request allows a client to request a unit by name.",
        "operationId": "GetUnitsByName",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/framespaceUnit"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "FrameSpaceService"
        ]
      }
    }
  },
  "definitions": {
    "framespaceAxis": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "string"
        },
        "description": {
          "type": "string",
          "format": "string"
        }
      },
      "description": "Axis represents the top level description of a KeySpace\nsuch as Samples, Genomic Labels, Clinical Terms.\nNote: Experimental measurements are Units, not axes."
    },
    "framespaceBuildDataFrameRequest": {
      "type": "object",
      "properties": {
        "major": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceKeySet"
          }
        },
        "minor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceKeySet"
          }
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceUnit"
          }
        },
        "page_size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "BuildDataFrameRequest is a POST to /dataframe\nGiven an id return a slice based on the following dimensions.\nClient creates a list of keys as a new dimension, if desired.\nSubsetting / pagination can be performed by page_start and page_end."
    },
    "framespaceDataFrame": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "string"
          }
        },
        "contents": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufStruct"
          }
        }
      },
      "title": "Dataframe consists of two dimensions. \nunits is a flag specifying the value of a cell.\nAny restrictions on units should be defined in metadata.\nThe order of heterogenous vectors should correspond to order of\nunits in Unit list.\nThe struct object is protos equivalent of a python dict:\ndataframe.contents[contents_key][struct_key] = struct_value\nie. {'geneA': {'sample1': 0}}, would be populated as\ndataframe.contents['geneA']['sample1'] = 0"
    },
    "framespaceKeySet": {
      "type": "object",
      "properties": {
        "keyspace_id": {
          "type": "string",
          "format": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "description": "Dimension is a subset of keys from a KeySpace.\nActual subset is defined by the keys list. \nA key in a dimension must belong to the keyspace identifed by id."
    },
    "framespaceKeySpace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "axis_name": {
          "type": "string",
          "format": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "description": "KeySpace is the set of keys that a project has defined, \nfor a given axis space, Example: (sample1, sample2, sample3).\nRestrictions on keys can be defined in the metadata field.\nA key is defined as an entity identifier."
    },
    "framespaceSearchAxesRequest": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "description": "SearchAxesRequest is a POST to /axes/search \nSearch criteria: all axes or search by axis name."
    },
    "framespaceSearchAxesResponse": {
      "type": "object",
      "properties": {
        "axes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceAxis"
          }
        },
        "next_page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "title": "SearchAxesResponse returned from /axes/search"
    },
    "framespaceSearchKeySpacesRequest": {
      "type": "object",
      "properties": {
        "keyspace_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "axis_names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "description": "SearchKeySpacesRequest is a POST to /keyspaces/search \nSearch criteria: search by keyspace name/id, axis name, and keys.\nAn axis name is required in the request."
    },
    "framespaceSearchKeySpacesResponse": {
      "type": "object",
      "properties": {
        "keyspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceKeySpace"
          }
        },
        "next_page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "title": "SearchKeySpacesResponse returned from /keyspaces/search"
    },
    "framespaceSearchUnitsRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "description": "SearchUnitsRequest is a POST to /units/search\nSearch for available units of measurement.\nSearch criteria: all units, filter by unit id/name."
    },
    "framespaceSearchUnitsResponse": {
      "type": "object",
      "properties": {
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framespaceUnit"
          }
        },
        "next_page_token": {
          "type": "string",
          "format": "string"
        }
      },
      "title": "SearchUnitsResponse is returned from /units/search"
    },
    "framespaceUnit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "description": {
          "type": "string",
          "format": "string"
        }
      },
      "description": "Unit is a basic message enforcing a label naming the measurement,\na description to identify specific info about this measurement.\nUnits have ids because unit names can be arbitary."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "format": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
